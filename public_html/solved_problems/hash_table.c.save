// Writing and implementing the Hash Function and crating and storing them in a Hash table

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define TABLE_SIZE 25
//#define WORD_LEN   50
long hash (char letter);

typedef struct node
{
  char key;
  int count;
//  struct node *next;
} NODE;

NODE hash_table[TABLE_SIZE];
int collisions = 0;
void print_table ();
int find (int hv, char key[WORD_LEN]);

int main (int argc, char *argv[])
{
  FILE *fd;
  char str[WORD_LEN], buff[WORD_LEN];
  long hash_value = 0;
  int i;
  NODE *p;
  if (argc < 2)
    {
      fprintf (stderr, "Expected Filename.\n");
      exit (0);
    }
  fd = fopen (argv[1], "r");
  if (fd == NULL)
    {
      fprintf (stderr, "File Does not Exist.\n");
      exit (0);
    }
  while ((c=fgetc(fd)) != EOF)
    {
      hash_value = hash (c);
      //Check to see if the spot is empty
      if (hash_table[hash_value].count == 0){			//You can also check if pointer is NULL or strlen is 0
	  strcpy (hash_table[hash_value].key,c);
	  hash_table[hash_value].count++;
	}
      else
	{
	  //If it comes here means there is a word there.
	  printf ("Collision!!\n");
	  collisions++;
	  //We will search the list and see if the word matches with anything.
	  find (hash_value,c);
	}
    }				//End of While


  print_table ();

  return 0;
}

long hash (char key)
{
  long x, i, result = 0;
  long a = 1, inc = 2;
      x = key - 96;
      result = (result + x * a);
      a = a * inc;
  result = result % TABLE_SIZE;
  return result;
}


int find (int hv, char key)
{

  NODE *p, *q, *temp;
  //Let the temporary pointer point to that block 
  p = &hash_table[hv];	//& is for address of that block.
    //I am going to use a do.. while loop here.
  do
    {
      if (strcmp (, p->key) == 0)
	{			//Compare the words
	  p->count++;		//Iffound increment the count 
	  printf ("Word found and incremented\n");
	    return 1;
	}
      q = p;
      //Q is the previous block.
      p = p->next;
    }
  while (p != NULL);

  //Coming here means word not found. So return add the word & make the count zero.
  //Create a block
  printf ("Word Not found, so adding it.\n");
  temp = (NODE *) malloc (sizeof (struct node));
  strcpy (temp->key, buff);	//Copy the word onto the new block.
  temp->count = 1;
  temp->next = NULL;
  q->next = temp;		//Adding the block to the list
  return 0;
}

void print_table ()
{
  NODE *p;
  int i;
  for (i = 0; i < TABLE_SIZE; i++)
    {
      p = &hash_table[i];
      printf ("%4d : ", i);

      while (p != NULL)
	{
	  printf ("%s   %d", p->key,p->count);
	   p = p->next;
	}
      printf ("\n");
    }
  printf ("No of Collisions: %d\n", collisions);
  return;
}
