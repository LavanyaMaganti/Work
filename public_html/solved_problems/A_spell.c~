#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<ctype.h>

#define bufsize 1000
//void spellcheck (char *a);

int main (int argc, char *argv[])
{
  int i, c;
  FILE *fd;
  int linenum=0;
  char *a,*b;
  char buff[bufsize];
  if (argc < 2)
    {
      printf ("Expexted file name and dictionary filename\n");
      exit (0);
    }
    
    read_dictionary(argv[2]);
    read_file(argv[1]);
    spell_check();
    word_search(char *);
  }
 
 void read_dictionary (char *dictname)
 {
   FILE *fd;
     int i = 0;
       fd = fopen (filename, "r");
         while (fscanf (fd, "%s", buffer) != EOF)
             dict[i++] = strdup (buffer);
               num_words = i;
                 fclose (fd);
                 }
               
 void read_file(char *filename)
 {
 FILE *fd;
    fd = fopen (argv[1], "r");
  if (fd == 0)
    {
      printf ("Couldnot open file\n");
    }

  else
    {
     while (fgets (buff, bufsize, fd) != NULL)
//	while (fgetc(fd) != NULL)
	{
///puts (buff);
     a = strtok (buff, " ");
	  while (a != NULL)
	    {
	//      spell_check (a);
      printf ("%s\n", a);

	         while(a!='\n')
	          {
	          if(!
            }
     a = strtok (0, " ");

	    }
	}
      fclose (fd);
//    printf("\n");
    }
  }

void spell_check()
{
char *str;
str=strtok(statement," .,!-");
 while (str != NULL)
     {
           if (!word_search (str))
             printf ("%s Not found.\n", str);
             
                   str = strtok (0, " .?,!-");
                       }
                       
}


int word_search (char *word)
{
  int high, low, mid;
    high = num_words - 1;
      low = 0;
        int found = 0;
          while (found == 0)
              {
                    mid = (low + high) / 2;
                          if (strcmp (word, dict[mid]) == 0)
                            return 1;
                                  else if (strcmp (word, dict[mid]) < 0)
                                    high = mid - 1;
                                          else
                                            low = mid + 1;
                                                  if (low > high)
                                                    return 0;
                                                        }
                                                        }
                                                        
