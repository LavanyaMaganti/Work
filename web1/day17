03-21-2017:

- Change to exam date (3/30-3/31 instead of 3/23-3/24)
- Last assignment success was very poor.
- Cheating on assignments.

- Notes:
  ^ is the binary XOR operator, not exponentiation.  Use Math.pow(x,y) to raise
  x to the y'th power.  Eventually x**y will do the same thing.


Strings (cont):
==============
- .substr() method - extracts a sub-string:
  "abcdefghi".substr(1,3) == "bcd"
                       ^ Optional, if not present goes to the end of the string.


Arrays:
======
- Arrays are like a folder of data items.  Like strings, data items within an
  array are indexed starting at 0.  Like strings if there is no data at a
  specific index, then the result is "undefined".  Unlike strings, arrays
  may hold any kind of data at each location and may even have "holes" in
  the array.

- Arrays are created using square brackets:
  var a = [ 1, 2, 3 ];	// An array holding three numbers.
  var a2 = [ 1, 2, "three", , "five" ];
    // An array with numbers and strings and nothing at index 3.

- a.join(" ");	// outputs "1 2 3"
  a.join(",");	// outputs "1,2,3"
  a.join("");	// outputs "123"
  // Joins the items in the array together with the string passed to join
  // between each element.

- a.reverse();	// Reverses elements in an array.

  "abc".split("").reverse().join(""); // returns "cba"
  - Methods can be chained together.  The above splits the string "abc" into
    an array ['a', 'b', 'c'], then reverses it to ['c', 'b', 'a'] then joins
    the elements together into 'cba'.

- Multi-dimensional arrays:
  - One can have arrays inside of arrays, like:
  var m = [[1,2,3],[4,5,6],[7,8,9]]; // A 2-dimensional array
  - To access an element you can chain the indexes, they are read from left
    to right, i.e.: m[i][j]  where:
      i = index into the primary array.
      j = index into the sub-array.
   ex: m[0][2] == 3
       m[1][0] == 4

- Other useful array methods:
  --------------------------
  .push(x)	- Adds x to the end of the array.
  ex:
   var a = [];
   a.push(3); a.push(2); a.push(1); // a == [3, 2, 1]

  .pop()	- Removes the last element from an array and returns it.
  ex: var data = a.pop();	// data == 1; a == [3, 2]

  .unshift(x)	- Adds x to the beginning of an array.
  a.unshift(2); a.unshift(1);	// a == [1, 2, 3, 2];

  .shift()	- Removes the first element from an array and returns it.
  var data = a.shift();		// data == 1; a == [2, 3, 2];

  .indexOf(x)	- Returns the first index of an element matching x or -1 if not
                  found.
  a.indexOf(2)	== 0

  .forEach(func)- Calls the function func for each individual element in the
                  array, passing the function the value of the element:
   ex:
     // Print out all the elements of the array arr:
     arr.forEach(function (val) { console.log(val); });

Assignment with operations:
==========================
- We often want to modify the value of a variable by adding or subtracting, etc
  things from it.  Normally this might be accomplished by:

  x = x + 2;	// Takes the value of x, adds two to it and assigns the new
		// value back to x.

  There is a shortcut for the generalized form of:

  x = x <op> <value>;

  Where <op> is one of +, -, *, /, %, &, |, ^, <<, >>, >>> and **, can be
  re-written as:

  x <op>= <value>;

  Example:

  x += 2;	// Same as x = x + 2;
  x *= 5;	// Same as x = x * 5;
